import * as dotenv from "dotenv";
import { ethers } from "ethers";

dotenv.config();

async function checkEnvironment() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è...\n");

  let hasErrors = false;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Private Key
  console.log("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Private Key...");
  const privateKey = process.env.DEPLOYER_PRIVATE_KEY;

  if (!privateKey || privateKey === "0x0000000000000000000000000000000000000000000000000000000000000000") {
    console.error("‚ùå DEPLOYER_PRIVATE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
    console.error("   –û—Ç–∫—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à private key");
    hasErrors = true;
  } else if (!privateKey.startsWith("0x") || privateKey.length !== 66) {
    console.error("‚ùå DEPLOYER_PRIVATE_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!");
    console.error("   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 0x + 64 hex —Å–∏–º–≤–æ–ª–∞");
    console.error("   –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞:", privateKey.length);
    hasErrors = true;
  } else {
    try {
      const wallet = new ethers.Wallet(privateKey);
      console.log("‚úÖ Private Key –≤–∞–ª–∏–¥–µ–Ω");
      console.log("   –ê–¥—Ä–µ—Å –¥–µ–ø–ª–æ–µ—Ä–∞:", wallet.address);
      console.log("   ‚ö†Ô∏è  –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–ª—é—á–æ–º!\n");
    } catch (error) {
      console.error("‚ùå Private Key –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:", error);
      hasErrors = true;
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC URLs
  console.log("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC URLs...");
  const sepoliaRpc = process.env.SEPOLIA_RPC_URL;
  const mainnetRpc = process.env.MAINNET_RPC_URL;

  if (!sepoliaRpc || sepoliaRpc.includes("YOUR_INFURA_KEY") || sepoliaRpc.includes("YOUR-API-KEY")) {
    console.error("‚ùå SEPOLIA_RPC_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
    console.error("   –ü–æ–ª—É—á–∏—Ç–µ Infura Project ID –Ω–∞ https://infura.io");
    hasErrors = true;
  } else {
    console.log("‚úÖ Sepolia RPC URL:", sepoliaRpc.substring(0, 50) + "...");
  }

  if (!mainnetRpc || mainnetRpc.includes("YOUR_INFURA_KEY") || mainnetRpc.includes("YOUR-API-KEY")) {
    console.log("‚ö†Ô∏è  MAINNET_RPC_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    console.log("   (–ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–ø–ª–æ—è –≤ mainnet)\n");
  } else {
    console.log("‚úÖ Mainnet RPC URL:", mainnetRpc.substring(0, 50) + "...\n");
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
  if (sepoliaRpc && !sepoliaRpc.includes("YOUR_INFURA_KEY")) {
    console.log("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepolia...");
    try {
      const provider = new ethers.JsonRpcProvider(sepoliaRpc);
      const blockNumber = await provider.getBlockNumber();
      console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia —É—Å–ø–µ—à–Ω–æ");
      console.log("   –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:", blockNumber);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      if (privateKey && privateKey.startsWith("0x") && privateKey.length === 66) {
        const wallet = new ethers.Wallet(privateKey, provider);
        const balance = await provider.getBalance(wallet.address);
        const ethBalance = ethers.formatEther(balance);

        console.log("\nüí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:", ethBalance, "SepoliaETH");

        if (parseFloat(ethBalance) === 0) {
          console.error("‚ùå –ë–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0!");
          console.error("   –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ ETH:");
          console.error("   - https://sepoliafaucet.com");
          console.error("   - https://www.alchemy.com/faucets/ethereum-sepolia");
          hasErrors = true;
        } else if (parseFloat(ethBalance) < 0.1) {
          console.warn("‚ö†Ô∏è  –ë–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 0.5 ETH –¥–ª—è –¥–µ–ø–ª–æ—è");
          console.warn("   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω");
        } else {
          console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –¥–µ–ø–ª–æ—è");
        }
      }
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sepolia:");
      console.error("  ", error.message);
      console.error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SEPOLIA_RPC_URL –≤ .env —Ñ–∞–π–ª–µ");
      hasErrors = true;
    }
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Etherscan API Key
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Etherscan API Key...");
  const etherscanKey = process.env.ETHERSCAN_API_KEY;

  if (!etherscanKey || etherscanKey === "YOUR_ETHERSCAN_API_KEY") {
    console.warn("‚ö†Ô∏è  ETHERSCAN_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    console.warn("   –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://etherscan.io/myapikey");
    console.warn("   (–ù—É–∂–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)\n");
  } else {
    console.log("‚úÖ Etherscan API Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    console.log("   Key:", etherscanKey.substring(0, 10) + "..." + "\n");
  }

  // 6. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log("‚ïê".repeat(50));
  if (hasErrors) {
    console.error("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!");
    console.error("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.\n");
    console.error("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: contracts/DEPLOYMENT_GUIDE.md\n");
    process.exit(1);
  } else {
    console.log("\n‚ú® –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    console.log("üöÄ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –≤ Sepolia testnet!\n");
    console.log("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("  1. pnpm deploy:sepolia");
    console.log("  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã");
    console.log("  3. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –Ω–∞ Etherscan\n");
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkEnvironment().catch((error) => {
  console.error("\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});
